<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="restaurant">
	<insert id="insert" parameterType="restaurantVO">
		insert into restaurant(num, cnum, store, area1, area2, addr, tel, cate) 
		values (restaurant_seq.nextval, #{cnum}, #{store}, #{area1}, #{area2}, #{addr}, #{tel}, #{cate})
	</insert>
	
	<!-- 카테고리 갯수 -->
	<select id="count" parameterType="String" resultType="int">
		select count(*) from restaurant where cate=#{value}
	</select>
	
	<select id="search" parameterType="list" resultType="restaurantVO">
		select * from (select * from restaurant where addr like '%'||#{list[0]}||'%') where area2 like '%'||#{list[1]}||'%'
	</select>
	
	<!-- 가장 선호하는 카테고리의 값 -->
	<select id="greatest" parameterType="String" resultType="int">
		select greatest (kor, china, japan, european, bunsig, cafe, etc) from mem where id=#{id}
	</select>
	
	<!-- 위 값과 일치하는 카테고리의 이름 -->
	<select id="cate" parameterType="int" resultType="String">
		WITH t AS (SELECT kor, china, japan, european, bunsig, cafe, etc FROM mem)
    	SELECT * FROM t
    	UNPIVOT (yn FOR cnm IN (kor, china, japan, european, bunsig, cafe, etc))
		WHERE yn = #{value}
	</select>
	
	<!-- 식당 카테고리 -->
	<select id="select" parameterType="String" resultType="restaurantVO">
		select * from restaurant where cate = #{cate}
	</select>
	
	<!-- 식당 정보 출력 -->
	<select id="info" resultType="restaurantVO" parameterType="String">
		select * from restaurant where cnum=#{cnum}
	</select>
	
	<!-- 식당 주소 출력 -->
	<select id="restaddr" parameterType="String" resultType="restaurantVO">
		select area1, area2, addr, store from restaurant where cnum=#{value}
	</select>
	
	<!-- 식당 지역분류 -->
	<select id="restArea" parameterType="String" resultType="restaurantVO">
		select distinct area1 from restaurant where cate=#{value}
	</select>
	
	<!-- 식당 카테고리+지역분류 -->
	<select id="selectArea" parameterType="list" resultType="restaurantVO">
		select * from restaurant where area1=#{list[0]} and cate=#{list[1]}
	</select>
	
	<!-- 식당 카테고리+지역분류 카운트 -->
	<select id="restAreaCnt" parameterType="String" resultType="int">
		select count(*) from (select distinct area1 from restaurant where cate=#{value})
	</select>
	
	<!-- 레스토랑 리뷰 이미지 이름 숫자 카운트 업 -->
 	<insert id="ImgcountInsert">
 		insert into fileNum values(fileNum_seq.nextval)
 	</insert>
 	
 	
 	<!-- 레스토랑 리뷰 이미지 이름 숫자 카운트 가져오기 -->
 	<select id="ImgCount" resultType="int">
 		select max(num) from fileNum
 	</select>
 	
	
	<!-- 레스토랑 리뷰 쓰기 -->
 	<insert id="ReviewInsert" parameterType="restaurantReviewVO">
 		insert into restaurant_re(num,cnum,id,nick,text,img,reg_date) values (restaurant_re_seq.nextval,#{cnum},#{id},#{nick},#{text},#{img},sysdate)
 	</insert>
 	
	<!-- 레스토랑 리뷰 갯수 -->
 	<select id="ReviewCount" parameterType="String" resultType="int">
 		select count(*) from restaurant_re where cnum=#{value}
 	</select>
	
	<!-- 레스토랑 리뷰 가져오기 -->
 	<select id="reviewSelect" parameterType="String" resultType="restaurantReviewVO">
 	   select * from restaurant_re
 	   <if test="value != null">
 	    where cnum=#{value} 
 	    </if> 
 	    order by reg_date desc
 	</select>
 	
 	<!-- 회원 레스토랑 리뷰 리스트 -->
 	<select id="memReviewList" parameterType="String" resultType="restaurantReviewVO">
 		select * from restaurant_re where id=#{value}
 	</select>
 	
 	<!-- 레스토랑 리뷰 삭제 아이디값 비교 -->
 	<select id="idSelect" parameterType="int" resultType="String">
 	  select id from restaurant_re where num=#{num}
 	</select>
 	
 	<!-- 레스토랑 리뷰 삭제 -->
 	<delete id="reviewDelete" parameterType="int">
 		delete from restaurant_re where num = #{value}
 	</delete>
 	
 	<!-- 레스토랑 리뷰 수정 -->
 	<update id="reviewUpdate" parameterType="restaurantReviewVO">
 		update restaurant_re set text=#{text} where num=#{num} 
 	</update>
 	
 	
 	<!-- 레스토랑 리뷰 텍스트 가져오기 -->
 	<select id="reviewText" parameterType="int" resultType="String">
 		select text from restaurant_re where num=#{num}
 	</select>
 	
 	<!-- 레스토랑 리뷰 좋아요 클릭 여부 체크 -->
 	<select id="reviewCheck" parameterType="restaurantReviewNiceVO" resultType="int">
 		select count(*) from restaurant_re_nice where renum=#{renum} and id=#{id}
 	</select>
 	
 	<!-- 레시피 리뷰 쪼아요 갯수 -->
 	<select id="niceCount" parameterType="int" resultType="int">
 		select count(*) from restaurant_re_nice where renum=#{value}
 	</select>	
 	
 	<!-- 레시피 리뷰 쪼아요 -->
 	<insert id="reviewNiceInsert" parameterType="restaurantReviewNiceVO">
 		insert into restaurant_re_nice values (restaurant_re_nice_seq.nextval, #{id}, #{renum})
 	</insert>
 	
 	<!-- 레시피 리뷰 쪼아요 해제 -->
 	<delete id="reviewNiceDelete" parameterType="restaurantReviewNiceVO">
 		delete from restaurant_re_nice where id=#{id} and renum= #{renum}
 	</delete>
</mapper>

<!-- 
	기타식당 갯수
<select id="countEtc" resultType="int">
	select count(*) from restaurant where cate not in ('한식', '중식', '일식', '양식', '분식', '카페')
</select>
	
	식당카테고리 기타 제외
<select id="restEtc" resultType="restaurantVO">
	select * from restaurant where cate not in ('한식', '중식', '일식', '양식', '분식', '카페')
</select>

	식당 기타 지역분류
<select id="restAreaEtc" resultType="restaurantVO">
	select distinct area1 from restaurant where cate not in ('한식', '중식', '일식', '양식', '분식', '카페')
</select>

	식당 기타 카테고리+지역분류
<select id="selectAreaEtc" parameterType="String" resultType="restaurantVO">
	select * from restaurant where area1=#{value} and cate not in ('한식', '중식', '일식', '양식', '분식', '카페')
</select>

	식당 기타 카테고리+지역분류 카운트
<select id="restAreaCntEtc" resultType="int">
	select count(*) from (select distinct area1 from restaurant where cate not in ('한식', '중식', '일식', '양식', '분식', '카페'))
</select>
-->